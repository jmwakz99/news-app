{"version":3,"sources":["news/news.component.jsx","news-list/news-list.component.jsx","search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","margin","maxWidth","title","color","source","image","width","height","img","display","maxHeight","News","props","classes","className","Paper","Grid","container","item","xs","sm","ButtonBase","alt","src","habari","urlToImage","style","textAlign","direction","Typography","variant","cursor","name","opacity","fromNow","ago","publishedAt","NewsList","news","map","index","key","SearchBox","handleChange","type","placeholder","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","articles","this","searchedNews","filter","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8999f351.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./news.styles.css\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Moment from \"react-moment\";\r\nimport \"moment-timezone\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 2,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(3),\r\n    margin: \"30px auto\",\r\n    maxWidth: 500,\r\n  },\r\n  title: {\r\n    color: \"#1A0DAB\",\r\n  },\r\n  source: {\r\n    color: \"green\",\r\n  },\r\n  image: {\r\n    width: 128,\r\n    height: 128,\r\n  },\r\n  img: {\r\n    margin: \"auto\",\r\n    display: \"block\",\r\n    maxWidth: \"100%\",\r\n    maxHeight: \"100%\",\r\n  },\r\n}));\r\n\r\nconst News = (props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} sm={6}>\r\n            <ButtonBase className={classes.image}>\r\n              <img\r\n                className={classes.img}\r\n                alt=\"News\"\r\n                src={props.habari.urlToImage}\r\n              />\r\n            </ButtonBase>\r\n          </Grid>\r\n          <Grid item xs={12} sm container style={{ textAlign: \"left\" }}>\r\n            <Grid item xs container direction=\"column\" spacing={2}>\r\n              <Grid item xs>\r\n                <Typography variant=\"subtitle1\" className={classes.title}>\r\n                  {props.habari.title}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography\r\n                  variant=\"body2\"\r\n                  className={classes.source}\r\n                  style={{ cursor: \"pointer\", display: \"inline\" }}\r\n                >\r\n                  {props.habari.source.name}\r\n                </Typography>\r\n                <span style={{ display: \"inline\", opacity: 0.8 }}>\r\n                  {\" \"}\r\n                  -{\" \"}\r\n                  <Moment fromNow ago>\r\n                    {props.habari.publishedAt}\r\n                  </Moment>{\" \"}\r\n                  ago\r\n                </span>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default News;\r\n","import React from \"react\";\r\nimport News from \"../news/news.component\";\r\nimport \"./news-list.styles.css\";\r\n\r\nconst NewsList = (props) => {\r\n  return (\r\n    <div className=\"\">\r\n      {props.news.map((habari, index) => {\r\n        return <News key={index} habari={habari} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewsList;\r\n","import React from \"react\";\r\n\r\nimport \"./search-box.styles.css\";\r\n\r\nconst SearchBox = ({ handleChange, type, placeholder }) => {\r\n  return (\r\n    <div className=\"search-box\">\r\n      <div className=\"search\">\r\n        <input\r\n          className=\"search-input\"\r\n          type={type}\r\n          placeholder={placeholder}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\nimport NewsList from \"./news-list/news-list.component\";\nimport SearchBox from \"./search-box/search-box.component\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      news: [],\n      searchField: \"\",\n    };\n  }\n  componentDidMount() {\n    fetch(\n      `https://newsapi.org/v2/top-headlines?country=us&apiKey=f1d8d6b770cf4c828522e97c7db914f5 `\n    )\n      .then((response) => response.json())\n      .then((news) => {\n        this.setState(() => {\n          return {\n            news: news.articles,\n          };\n        });\n      });\n  }\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  render() {\n    const { news, searchField } = this.state;\n\n    const searchedNews = news.filter((habari) =>\n      habari.source.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    if (searchedNews.length > 0) {\n      return (\n        <div className=\"App\">\n          <SearchBox\n            type=\"search\"\n            placeholder=\"search news from different sources e.g fox news, bbc news...\"\n            handleChange={this.handleChange}\n          />\n          <NewsList news={searchedNews} />\n        </div>\n      );\n    } else {\n      return <div>Looding...</div>;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}